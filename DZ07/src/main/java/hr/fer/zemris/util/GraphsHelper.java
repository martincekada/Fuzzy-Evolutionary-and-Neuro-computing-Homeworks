package hr.fer.zemris.util;

import hr.fer.zemris.ann.Layer;
import hr.fer.zemris.ann.NeuralNetwork;
import hr.fer.zemris.ann.neurons.INeuron;
import org.apache.commons.lang3.ArrayUtils;

import java.io.IOException;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.StringJoiner;

public class GraphsHelper {

    public static void main(String[] args) throws IOException {
//        forthTask();
//        persTask();
//        fifthTask();
//        persTask2();
        persTask3();
    }

    public static void persTask3() {
        NeuralNetwork network = new NeuralNetwork(2 , 6, 4, 3);

        network.setGenome(
//                1.558244364981101E-4
                new double[] {0.6307329641752308, 0.664521017688731, -0.08026778087502541, 1.5485515902344198, 0.36109755290197587, 0.7736860908940006, -0.16097741982780095, -0.11829521562840659, -1.095872159828244, 0.06724953429764133, -2.381421652304337, -1.0164049302764981, 0.8152638132568657, 0.7543416687498671, -0.9018081216075482, 0.41705642386080477, 0.14118542332258655, 0.3381799112666125, -0.11891633057754539, 1.9163801994212362, 0.847514661541168, 0.28766050629913886, -0.08823407569011643, -0.12106531689143321, -1.4108566680095795, -0.8109704334083616, 4.239396831015201, 4.443514444280677, 1.7751220417652396, -0.784204053805322, 5.315439518008974, -13.428564082902316, -16.809242270935343, 3.476071174161529, -0.8827826043266751, 5.500899997167564, 13.238034617658354, -1.7441100561922158, 6.502277119340152, 4.903042066929986, -5.189379715510734, 1.2297568328379669, -8.533959023429798, -9.42432868724956, -1.0760415848535234, 5.095524905161967, 10.220743681911003, -2.1023448602826402, -4.761073318621307, -5.002905527304925, 3.5118350083424454, -0.510773554036293, -4.623987509056889, 22.27278711942241, 32.0268543541362, -4.920532857546877, -3.6366943353489987, 5.898006705809369, -23.464714371823828, -20.464133401919618, -26.884675039243113, 5.3374334040003655, -4.534120070334555, -66.56956091539735, -29.87023052665706, 23.255090103126896, -2.377091315390633}
        );

        List<Sample> all = new ArrayList<>();

        for (double i = 0; i < 1; i += 0.01) {
            for (double j = 0; j < 1; j += 0.01) {
                Sample s = new Sample(new double[] {i, j}, null);
                s.setOutput(ClassDecoder.decode(network.predict(s)));
                all.add(s);
            }
        }

//        StringJoiner sj = new StringJoiner(",");
//
//        for (Sample s : all) {
//            sj.add(Arrays.toString(s.getInput()));
//        }
//
//        System.out.println("[" + sj.toString() + "]");


        int[] classes = new int[all.size()];
        int i = 0;
        for (Sample s : all) {
            classes[i] = ArrayUtils.indexOf(s.getOutput(), 1);
            ++i;
        }

        System.out.println(Arrays.toString(classes));

        Layer first = network.getFirstLayer();

        for (INeuron n : first.getNeurons()) {
            System.out.println(Arrays.toString(n.getWeights()));
        }

    }

    public static void persTask2() {
        NeuralNetwork network = new NeuralNetwork(2 , 8, 4, 3);

        network.setGenome(
                new double[] {0.3678151883049928, 0.29862183933848624, 2.547293036331324, 0.262570972127521, 0.8678665790862676, 0.6645633677932579, -0.24960389902338226, 0.7118591173031292, 0.6176434071838492, 0.778828081635723, -0.015085072090316176, -0.06902686189280986, 0.6379970761937921, 0.15297071268018111, 0.21540224292301197, -2.346940863658464, 0.6205860332654155, 0.23693619436477614, 0.10900072805422023, -0.3441495124036116, 0.22418358094723628, 0.8022906153309937, 3.848934792505982, 0.2267098123608546, 0.14516212993540228, 0.19002695629573385, -0.19526509393626273, -0.24800276860787424, 0.36357744442008555, 0.7473724885005755, 0.059082273553933015, -0.8056740735709317, -2.6891115506852454, 2.7098773874147435, -34.342722794907736, -0.5470311266090209, -5.438753332519406, 4.271218544041929, -6.353056107876658, 27.145305951235642, -1.3003710125630497, 1.468299740132442, 1.5596537448258836, 13.39674901120188, -2.083577720789243, -5.1876864941134855, -2.8303543978855537, 7.326247142450327, -2.2050760559892524, 0.3557483221433202, 4.974807204788856, -3.298663002332333, 5.666646064110642, 3.7114727326717682, 5.306711811454679, -8.066559478260647, -1.658597313711374, 15.115475780331302, -1.4400260694021947, 0.7285405076414648, -5.2206632252202905, -5.749837804923723, -1.473834938614953, 11.911249167609142, -6.134580917630398, -1.4146420869125904, 1.5586114418857293, 0.8222528631386475, -15.069041156936947, 11.165693820687743, 4.52589324924068, -13.050477162281076, -0.631909114692979, 6.8725415524643605, 4.892452952018781, -9.688338170082211, 7.306426210368717, -2.381505998382948, 1.054699776985836, -25.12336755873764, 5.955516697665576, 3.551622527013556, 2.9184642973298827}
        );

        List<Sample> all = new ArrayList<>();

        for (double i = 0; i < 1; i += 0.01) {
            for (double j = 0; j < 1; j += 0.01) {
                Sample s = new Sample(new double[] {i, j}, null);
                s.setOutput(ClassDecoder.decode(network.predict(s)));
                all.add(s);
            }
        }

//        StringJoiner sj = new StringJoiner(",");
//
//        for (Sample s : all) {
//            sj.add(Arrays.toString(s.getInput()));
//        }
//
//        System.out.println("[" + sj.toString() + "]");


        int[] classes = new int[all.size()];
        int i = 0;
        for (Sample s : all) {
            classes[i] = ArrayUtils.indexOf(s.getOutput(), 1);
            ++i;
        }

        System.out.println(Arrays.toString(classes));



    }


    public static void fifthTask() {

        NeuralNetwork network = new NeuralNetwork(2 , 8, 4, 3);

        network.setGenome(
//                8.912761825033738E-4
                new double[] {0.3678151883049928, 0.29862183933848624, 2.547293036331324, 0.262570972127521, 0.8678665790862676, 0.6645633677932579, -0.24960389902338226, 0.7118591173031292, 0.6176434071838492, 0.778828081635723, -0.015085072090316176, -0.06902686189280986, 0.6379970761937921, 0.15297071268018111, 0.21540224292301197, -2.346940863658464, 0.6205860332654155, 0.23693619436477614, 0.10900072805422023, -0.3441495124036116, 0.22418358094723628, 0.8022906153309937, 3.848934792505982, 0.2267098123608546, 0.14516212993540228, 0.19002695629573385, -0.19526509393626273, -0.24800276860787424, 0.36357744442008555, 0.7473724885005755, 0.059082273553933015, -0.8056740735709317, -2.6891115506852454, 2.7098773874147435, -34.342722794907736, -0.5470311266090209, -5.438753332519406, 4.271218544041929, -6.353056107876658, 27.145305951235642, -1.3003710125630497, 1.468299740132442, 1.5596537448258836, 13.39674901120188, -2.083577720789243, -5.1876864941134855, -2.8303543978855537, 7.326247142450327, -2.2050760559892524, 0.3557483221433202, 4.974807204788856, -3.298663002332333, 5.666646064110642, 3.7114727326717682, 5.306711811454679, -8.066559478260647, -1.658597313711374, 15.115475780331302, -1.4400260694021947, 0.7285405076414648, -5.2206632252202905, -5.749837804923723, -1.473834938614953, 11.911249167609142, -6.134580917630398, -1.4146420869125904, 1.5586114418857293, 0.8222528631386475, -15.069041156936947, 11.165693820687743, 4.52589324924068, -13.050477162281076, -0.631909114692979, 6.8725415524643605, 4.892452952018781, -9.688338170082211, 7.306426210368717, -2.381505998382948, 1.054699776985836, -25.12336755873764, 5.955516697665576, 3.551622527013556, 2.9184642973298827}
        );


        Layer first = network.getFirstLayer();

        for (INeuron n : first.getNeurons()) {
            System.out.println(Arrays.toString(n.getWeights()));
        }

    }

    public static void persTask() {
        NeuralNetwork network = new NeuralNetwork(2 , 8, 3);

        network.setGenome(
                new double[] {0.3631707182160358, 0.7721401277929034, -0.09474461784681912, -0.287280837358979, 0.6174160353888072, 0.7827125774754478, 0.11995233468416763, 0.2993385562420561, 0.12073457246366254, 0.7553517382827464, -0.18605770392740742, -0.5211030473769858, 0.8827592343216407, 0.8001674834145255, 0.09525828229578662, 0.2622497860225829, 0.8899228193851847, 0.2418844349668014, -0.15129095830783007, 0.2794386154654407, 0.6452656087630982, 0.23014604007584993, -0.05737699179900692, -0.183712749145723, 0.37686602250121326, 0.23656320794999974, -0.16490836946624388, 0.2788508190942225, 0.12154420906091767, 0.24824493542287396, -0.08955050153728478, 0.15868269323386788, -1.7778148040095103, 8.372108371963929, -5.910358087160538, -7.36690764002662, 7.2362099337724315, -4.881694124056391, -10.626639392568533, 14.759192333728645, 0.36532886869363096, -11.134981382093052, -3.0959561981042656, 9.291735148821797, 13.585012320566616, -6.345110741230855, -22.644151114418825, 17.6033132467243, -16.26792731622476, -0.2972242478517638, 18.910714238025307, -1.398522385764578, -2.1840053335792655, -30.273561835347166, 2.528548742672897, 25.159995010927457, -4.024367429495092, -13.705761983313394, -2.7996261131417723}
        );

        List<Sample> all = new ArrayList<>();

        for (double i = 0; i < 1; i += 0.01) {
            for (double j = 0; j < 1; j += 0.01) {
                Sample s = new Sample(new double[] {i, j}, null);
                s.setOutput(ClassDecoder.decode(network.predict(s)));
                all.add(s);
            }
        }

        StringJoiner sj = new StringJoiner(",");

        for (Sample s : all) {
            sj.add(Arrays.toString(s.getInput()));
        }

        System.out.println("[" + sj.toString() + "]");


        int[] classes = new int[all.size()];
        int i = 0;
        for (Sample s : all) {
            classes[i] = ArrayUtils.indexOf(s.getOutput(), 1);
            ++i;
        }

        System.out.println(Arrays.toString(classes));

    }



    public static void forthTask() {
//        0.03
//        [0.3631707182160358, 0.7721401277929034, -0.09474461784681912, -0.287280837358979, 0.6174160353888072, 0.7827125774754478, 0.11995233468416763, 0.2993385562420561, 0.12073457246366254, 0.7553517382827464, -0.18605770392740742, -0.5211030473769858, 0.8827592343216407, 0.8001674834145255, 0.09525828229578662, 0.2622497860225829, 0.8899228193851847, 0.2418844349668014, -0.15129095830783007, 0.2794386154654407, 0.6452656087630982, 0.23014604007584993, -0.05737699179900692, -0.183712749145723, 0.37686602250121326, 0.23656320794999974, -0.16490836946624388, 0.2788508190942225, 0.12154420906091767, 0.24824493542287396, -0.08955050153728478, 0.15868269323386788, -1.7778148040095103, 8.372108371963929, -5.910358087160538, -7.36690764002662, 7.2362099337724315, -4.881694124056391, -10.626639392568533, 14.759192333728645, 0.36532886869363096, -11.134981382093052, -3.0959561981042656, 9.291735148821797, 13.585012320566616, -6.345110741230855, -22.644151114418825, 17.6033132467243, -16.26792731622476, -0.2972242478517638, 18.910714238025307, -1.398522385764578, -2.1840053335792655, -30.273561835347166, 2.528548742672897, 25.159995010927457, -4.024367429495092, -13.705761983313394, -2.7996261131417723]

        NeuralNetwork network = new NeuralNetwork(2 , 8, 3);

        network.setGenome(
                new double[] {0.3631707182160358, 0.7721401277929034, -0.09474461784681912, -0.287280837358979, 0.6174160353888072, 0.7827125774754478, 0.11995233468416763, 0.2993385562420561, 0.12073457246366254, 0.7553517382827464, -0.18605770392740742, -0.5211030473769858, 0.8827592343216407, 0.8001674834145255, 0.09525828229578662, 0.2622497860225829, 0.8899228193851847, 0.2418844349668014, -0.15129095830783007, 0.2794386154654407, 0.6452656087630982, 0.23014604007584993, -0.05737699179900692, -0.183712749145723, 0.37686602250121326, 0.23656320794999974, -0.16490836946624388, 0.2788508190942225, 0.12154420906091767, 0.24824493542287396, -0.08955050153728478, 0.15868269323386788, -1.7778148040095103, 8.372108371963929, -5.910358087160538, -7.36690764002662, 7.2362099337724315, -4.881694124056391, -10.626639392568533, 14.759192333728645, 0.36532886869363096, -11.134981382093052, -3.0959561981042656, 9.291735148821797, 13.585012320566616, -6.345110741230855, -22.644151114418825, 17.6033132467243, -16.26792731622476, -0.2972242478517638, 18.910714238025307, -1.398522385764578, -2.1840053335792655, -30.273561835347166, 2.528548742672897, 25.159995010927457, -4.024367429495092, -13.705761983313394, -2.7996261131417723}
        );


        Layer first = network.getFirstLayer();

        for (INeuron n : first.getNeurons()) {
            System.out.println(Arrays.toString(n.getWeights()));
        }


    }

    public static void secondTask() throws IOException  {
        List<Sample> samples = Sample.loadSamples();

        StringJoiner sj = new StringJoiner(",");

        for (Sample s : samples) {
            sj.add(Arrays.toString(s.getInput()));
        }

        System.out.println("[" + sj.toString() + "]");


        int[] classes = new int[64];
        int i = 0;
        for (Sample s : samples) {
            classes[i] = ArrayUtils.indexOf(s.getOutput(), 1);
            ++i;
        }

        System.out.println(Arrays.toString(classes));
    }
}
